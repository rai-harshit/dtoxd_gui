#!/usr/bin/env python
# -*- coding: CP1252 -*-
#
# generated by wxGlade 0.9.3 on Fri Jun 14 09:45:55 2019
#

import wx
from threading import Thread
from time import sleep
import subprocess
import multiprocessing
import win32serviceutil
import os
# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade


class MyFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyFrame.__init__
        self.cwd = cwd = os.path.dirname(os.path.abspath(__file__))
        self.modpath = os.path.join(cwd,"modified_paths.log")
        self.startupinfo = None
        if os.name == 'nt':
            self.startupinfo = subprocess.STARTUPINFO()
            self.startupinfo.dwFlags |= subprocess.STARTF_USESHOWWINDOW	        
        kwds["style"] = kwds.get("style", 0) | wx.BORDER_SIMPLE | wx.CAPTION | wx.CLIP_CHILDREN | wx.CLOSE_BOX | wx.MINIMIZE_BOX | wx.STAY_ON_TOP | wx.SYSTEM_MENU
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((720, 420))
        self.list_ctrl_1 = wx.ListCtrl(self, wx.ID_ANY, style=wx.BORDER_DEFAULT | wx.BORDER_SIMPLE | wx.LC_ALIGN_LEFT | wx.LC_HRULES | wx.LC_LIST | wx.LC_SINGLE_SEL)
        self.button_1 = wx.Button(self, wx.ID_ANY, "Add New Directory")
        self.list_ctrl_2 = wx.ListCtrl(self, wx.ID_ANY, style=wx.LC_HRULES | wx.LC_LIST | wx.LC_NO_HEADER | wx.LC_VRULES)
        try:
	        win32serviceutil.QueryServiceStatus('dtoxd_directory_watcher')
        except:
        	self.button_8 = wx.Button(self, wx.ID_ANY, "Run Watcher")
        else:
        	self.button_8 = wx.Button(self, wx.ID_ANY, "Stop Watcher")
        self.button_2 = wx.Button(self, wx.ID_ANY, "Remove Directory")
        self.button_3 = wx.Button(self, wx.ID_ANY, "Generate Report")
        self.button_4 = wx.Button(self, wx.ID_ANY, "Clear Report")
        self.button_7 = wx.Button(self, wx.ID_ANY, "OK\n")
        self.button_6 = wx.Button(self, wx.ID_ANY, "Cancel\n")
        self.button_5 = wx.Button(self, wx.ID_ANY, "Apply\n")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.add_new_directory, self.button_1)
        self.Bind(wx.EVT_BUTTON, self.check_watcher, self.button_8)
        self.Bind(wx.EVT_BUTTON, self.remove_directory, self.button_2)
        self.Bind(wx.EVT_BUTTON, self.generate_report, self.button_3)
        self.Bind(wx.EVT_BUTTON, self.clear_report, self.button_4)
        self.Bind(wx.EVT_BUTTON, self.save_and_exit, self.button_7)
        self.Bind(wx.EVT_BUTTON, self.exit, self.button_6)
        self.Bind(wx.EVT_BUTTON, self.save, self.button_5)
        # end wxGlade
        self.items = []

    def __set_properties(self):
        # begin wxGlade: MyFrame.__set_properties
        self.SetTitle("dtoxd (The Directory Watcher)")
        self.SetBackgroundColour(wx.Colour(240, 240, 240))
        self.SetFont(wx.Font(13, wx.FONTFAMILY_SWISS, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, "Calibri"))
        self.list_ctrl_1.SetMinSize((220, 250))
        self.list_ctrl_1.SetFont(wx.Font(9, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Segoe UI"))
        self.button_1.SetMinSize((125, 26))
        self.button_1.SetFont(wx.Font(9, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Segoe UI"))
        self.list_ctrl_2.SetMinSize((220, 250))
        self.list_ctrl_2.SetFont(wx.Font(9, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Segoe UI"))
        self.watchDirs_path = os.path.join(self.cwd,"watchDirs")
        if not os.path.isfile(self.watchDirs_path):
        	open(self.watchDirs_path,"w+")
        older_dirs = open(self.watchDirs_path,"r")
        for od in older_dirs:
        	self.list_ctrl_1.InsertItem(0,od)
        self.button_8.SetMinSize((125, 26))
        self.button_8.SetFont(wx.Font(9, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Segoe UI"))
        self.button_2.SetMinSize((125, 26))
        self.button_2.SetFont(wx.Font(9, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Segoe UI"))
        self.button_3.SetMinSize((125, 26))
        self.button_3.SetFont(wx.Font(9, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Segoe UI"))
        self.button_4.SetMinSize((125, 26))
        self.button_4.SetFont(wx.Font(9, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Segoe UI"))
        self.button_7.SetMinSize((85, 26))
        self.button_6.SetMinSize((85, 26))
        self.button_5.SetMinSize((85, 26))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyFrame.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        grid_sizer_1 = wx.GridSizer(9, 9, 0, 0)
        grid_sizer_1.Add((0, 0), 0, 0, 0)
        grid_sizer_1.Add((0, 0), 0, 0, 0)
        grid_sizer_1.Add((0, 0), 0, 0, 0)
        grid_sizer_1.Add((0, 0), 0, 0, 0)
        label_1 = wx.StaticText(self, wx.ID_ANY, "The Directory Watcher")
        grid_sizer_1.Add(label_1, 0, wx.ALIGN_CENTER, 0)
        grid_sizer_1.Add((0, 0), 0, 0, 0)
        grid_sizer_1.Add((0, 0), 0, 0, 0)
        grid_sizer_1.Add((0, 0), 0, 0, 0)
        grid_sizer_1.Add((0, 0), 0, 0, 0)
        label_2 = wx.StaticText(self, wx.ID_ANY, "Watcher's Directory List")
        label_2.SetFont(wx.Font(9, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Segoe UI"))
        grid_sizer_1.Add(label_2, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 20)
        grid_sizer_1.Add((0, 0), 0, 0, 0)
        grid_sizer_1.Add((0, 0), 0, 0, 0)
        grid_sizer_1.Add((0, 0), 0, 0, 0)
        grid_sizer_1.Add((0, 0), 0, 0, 0)
        grid_sizer_1.Add((0, 0), 0, 0, 0)
        label_3 = wx.StaticText(self, wx.ID_ANY, "Watcher's Report")
        label_3.SetFont(wx.Font(9, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Segoe UI"))
        grid_sizer_1.Add(label_3, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_1.Add((0, 0), 0, 0, 0)
        grid_sizer_1.Add((0, 0), 0, 0, 0)
        grid_sizer_1.Add(self.list_ctrl_1, 1, wx.LEFT, 20)
        grid_sizer_1.Add((0, 0), 0, 0, 0)
        grid_sizer_1.Add((0, 0), 0, 0, 0)
        grid_sizer_1.Add((0, 0), 0, 0, 0)
        grid_sizer_1.Add(self.button_1, 0, wx.ALIGN_CENTER, 0)
        grid_sizer_1.Add((0, 0), 0, 0, 0)
        grid_sizer_1.Add(self.list_ctrl_2, 1, wx.LEFT, 0)
        grid_sizer_1.Add((0, 0), 0, 0, 0)
        grid_sizer_1.Add((0, 0), 0, 0, 0)
        grid_sizer_1.Add((0, 0), 0, 0, 0)
        grid_sizer_1.Add((0, 0), 0, 0, 0)
        grid_sizer_1.Add((0, 0), 0, 0, 0)
        grid_sizer_1.Add((0, 0), 0, 0, 0)
        grid_sizer_1.Add(self.button_8, 0, wx.ALIGN_CENTER, 0)
        grid_sizer_1.Add((0, 0), 0, 0, 0)
        grid_sizer_1.Add((0, 0), 0, 0, 0)
        grid_sizer_1.Add((0, 0), 0, 0, 0)
        grid_sizer_1.Add((0, 0), 0, 0, 0)
        grid_sizer_1.Add((0, 0), 0, 0, 0)
        grid_sizer_1.Add((0, 0), 0, 0, 0)
        grid_sizer_1.Add((0, 0), 0, 0, 0)
        grid_sizer_1.Add((0, 0), 0, 0, 0)
        grid_sizer_1.Add(self.button_2, 0, wx.ALIGN_CENTER, 0)
        grid_sizer_1.Add((0, 0), 0, 0, 0)
        grid_sizer_1.Add((0, 0), 0, 0, 0)
        grid_sizer_1.Add((0, 0), 0, 0, 0)
        grid_sizer_1.Add((0, 0), 0, 0, 0)
        grid_sizer_1.Add((0, 0), 0, 0, 0)
        grid_sizer_1.Add((0, 0), 0, 0, 0)
        grid_sizer_1.Add((0, 0), 0, 0, 0)
        grid_sizer_1.Add((0, 0), 0, 0, 0)
        grid_sizer_1.Add(self.button_3, 0, wx.ALIGN_CENTER, 0)
        grid_sizer_1.Add((0, 0), 0, 0, 0)
        grid_sizer_1.Add((0, 0), 0, 0, 0)
        grid_sizer_1.Add((0, 0), 0, 0, 0)
        grid_sizer_1.Add((0, 0), 0, 0, 0)
        grid_sizer_1.Add((0, 0), 0, 0, 0)
        grid_sizer_1.Add((0, 0), 0, 0, 0)
        grid_sizer_1.Add((0, 0), 0, 0, 0)
        grid_sizer_1.Add((0, 0), 0, 0, 0)
        grid_sizer_1.Add(self.button_4, 0, wx.ALIGN_CENTER | wx.ALL, 11)
        grid_sizer_1.Add((0, 0), 0, 0, 0)
        grid_sizer_1.Add((0, 0), 0, 0, 0)
        grid_sizer_1.Add((0, 0), 0, 0, 0)
        grid_sizer_1.Add((0, 0), 0, 0, 0)
        grid_sizer_1.Add((0, 0), 0, 0, 0)
        grid_sizer_1.Add((0, 0), 0, 0, 0)
        grid_sizer_1.Add((0, 0), 0, 0, 0)
        grid_sizer_1.Add((0, 0), 0, 0, 0)
        grid_sizer_1.Add((0, 0), 0, 0, 0)
        grid_sizer_1.Add((0, 0), 0, 0, 0)
        grid_sizer_1.Add((0, 0), 0, 0, 0)
        grid_sizer_1.Add((0, 0), 0, 0, 0)
        grid_sizer_1.Add((0, 0), 0, 0, 0)
        grid_sizer_1.Add((0, 0), 0, 0, 0)
        grid_sizer_1.Add((0, 0), 0, 0, 0)
        grid_sizer_1.Add((0, 0), 0, 0, 0)
        grid_sizer_1.Add((0, 0), 0, 0, 0)
        grid_sizer_1.Add((0, 0), 0, 0, 0)
        grid_sizer_1.Add((0, 0), 0, 0, 0)
        grid_sizer_1.Add(self.button_7, 0, wx.ALIGN_CENTER | wx.RIGHT, 95)
        grid_sizer_1.Add(self.button_6, 0, wx.ALIGN_CENTER | wx.RIGHT, 65)
        grid_sizer_1.Add(self.button_5, 0, wx.ALIGN_CENTER | wx.RIGHT, 35)
        sizer_1.Add(grid_sizer_1, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        self.Layout()
        self.Centre()
        # end wxGlade

    def check_watcher(self, event):
    	if self.button_8.GetLabel() == "Run Watcher":
    		self.run_watcher()
    	else:
    		self.stop_watcher()

    def run_watcher(self):
        path_count = self.list_ctrl_1.GetItemCount()
        if path_count == 0:
            wx.MessageBox("Watcher's List is empty. Add a directory to watch and try again.", "Attention !" ,wx.OK | wx.ICON_INFORMATION)
        else:
            if len(self.items) > 0:
                fw = open(self.watchDirs_path,"w")
                for item in self.items:
                    fw.write(item+"\n")
                fw.close()
            p_install = subprocess.Popen("python watcher_service.py install",startupinfo=self.startupinfo)
            bin1_1 = p_install.communicate()
            p_start = subprocess.Popen("python watcher_service.py start",startupinfo=self.startupinfo)
            bin1_2 = p_start.communicate()
            self.button_8.SetLabel("Stop Watcher")

    def stop_watcher(self):
        p_stop = subprocess.Popen("python watcher_service.py stop",startupinfo=self.startupinfo)
        p_remove = subprocess.Popen("python watcher_service.py remove",startupinfo=self.startupinfo)
        self.button_8.SetLabel("Run Watcher")

    def add_new_directory(self, event):
      	# wxGlade: MyFrame.<event_handler>
        dlg = wx.DirDialog(self, "Choose input directory", "",wx.DD_DEFAULT_STYLE)
        dlg.ShowModal()
        selected_path = dlg.GetPath()
        # if selected_path != "":
        path_count = self.list_ctrl_1.GetItemCount()
        for i in range(path_count):
            self.items.append(self.list_ctrl_1.GetItem(i).GetText().rstrip())
        if selected_path not in self.items:
            self.list_ctrl_1.InsertItem(0,selected_path)
            self.items.append(selected_path)
        else:
            wx.MessageBox("Path already exists in the Watcher's List.", "Attention !" ,wx.OK | wx.ICON_INFORMATION)

    def remove_directory(self, event):  # wxGlade: MyFrame.<event_handler>
    	path_count = self.list_ctrl_1.GetItemCount()
    	if path_count == 0:
    		wx.MessageBox("Nothing to remove as the Watcher's List is empty.", "Attention !" ,wx.OK | wx.ICON_INFORMATION)
    	else:
	    	selected_path = self.list_ctrl_1.GetFocusedItem()
	    	if selected_path is -1:
	    		wx.MessageBox("Please select a directory from the Watcher's List and try again.", "Attention !" ,wx.OK | wx.ICON_INFORMATION)
	    	else:
		    	del_item = self.list_ctrl_1.DeleteItem(selected_path)
        # event.Skip()


    def generate_report(self, event):  # wxGlade: MyFrame.<event_handler>
    	# old_count = self.list_ctrl_2.GetItemCount()
    	# for c in old_count:
        self.list_ctrl_2.DeleteAllItems()
        if os.path.isfile(self.modpath):
	        modified_paths = open(self.modpath,"r")
	        for path in modified_paths:
	        	self.list_ctrl_2.InsertItem(0,path)
        else:
	        open(self.modpath,"w").close()

    def clear_report(self, event):  # wxGlade: MyFrame.<event_handler>
        # print("Event handler 'clear_report' not implemented!")
        # event.Skip()
        if self.list_ctrl_2.GetItemCount() > 0:
	        response = wx.MessageBox("This will clear all the tracking history. Are you sure ?", "Attention !" ,wx.YES_NO | wx.ICON_EXCLAMATION)
	        if response == 2:
		        self.list_ctrl_2.DeleteAllItems()
		        open(self.modpath,"w").close()
        else:
	        wx.MessageBox("There is no tracking history to clear.", "Attention !" ,wx.OK | wx.ICON_EXCLAMATION)

    def save_and_exit(self, event):  # wxGlade: MyFrame.<event_handler>
    	wx.CallAfter(self.Close)

    def exit(self, event):  # wxGlade: MyFrame.<event_handler>
    	wx.CallAfter(self.Close)

    def save(self, event):  # wxGlade: MyFrame.<event_handler>
        # print("Event handler 'save' not implemented!")
        event.Skip()

# end of class MyFrame

class MyApp(wx.App):
    def OnInit(self):
        self.frame = MyFrame(None, wx.ID_ANY, "")
        self.SetTopWindow(self.frame)
        self.frame.Show()
        return True

# end of class MyApp

if __name__ == "__main__":
    app = MyApp(0)
    app.MainLoop()
